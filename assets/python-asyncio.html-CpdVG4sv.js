import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as l,b as n,d as s,e as a,w as r,a as e}from"./app-DxOkGf6w.js";const u={},d={class:"hint-container warning"},k=n("p",{class:"hint-container-title"},"注意",-1),h={href:"https://docs.python.org/zh-cn/3.10/library/asyncio.html",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"asyncio-—-异步-i-o-协程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#asyncio-—-异步-i-o-协程"},[n("span",null,"asyncio — 异步 I/O & 协程")])],-1),v=e("<p>asyncio 是用来编写  <strong>并发</strong>  代码的库，使用  <strong>async/await</strong>  语法。</p><p>asyncio 被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。</p><p>asyncio 往往是构建 IO 密集型和高层级  <strong>结构化</strong>  网络代码的最佳选择。</p><p>asyncio 提供一组  <strong>高层级</strong> API 用于:</p>",4),y={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#coroutine",target:"_blank",rel:"noopener noreferrer"},b={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-stream.html#asyncio-streams",target:"_blank",rel:"noopener noreferrer"},_={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-subprocess.html#asyncio-subprocess",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-queue.html#asyncio-queues",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-sync.html#asyncio-sync",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[s("此外，还有一些  "),n("strong",null,"低层级"),s(" API 以支持  "),n("em",null,"库和框架的开发者"),s("  实现:")],-1),x={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio-event-loop",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.create_server",target:"_blank",rel:"noopener noreferrer"},T={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec",target:"_blank",rel:"noopener noreferrer"},q={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html#asyncio.loop.add_signal_handler",target:"_blank",rel:"noopener noreferrer"},E={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-protocol.html#asyncio-transports-protocols",target:"_blank",rel:"noopener noreferrer"},F={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-future.html#asyncio-futures",target:"_blank",rel:"noopener noreferrer"},C=e(`<h2 id="协程与任务-1" tabindex="-1"><a class="header-anchor" href="#协程与任务-1"><span>协程与任务 <a href="%5B%E5%8D%8F%E7%A8%8B%E4%B8%8E%E4%BB%BB%E5%8A%A1%5D(https://docs.python.org/zh-cn/3/library/asyncio-task.html)">^1</a></span></a></h2><h3 id="协程" tabindex="-1"><a class="header-anchor" href="#协程"><span>协程</span></a></h3><p>通过 async/await 关键字来定义的协程是一种被推荐的编写异步程序的方式。</p><p>下面的代码定义并运行了一个协程：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> asyncio

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
hello
world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：简单地调用一个协程并不会使其被调度执行。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>coroutine <span class="token builtin">object</span> main at <span class="token number">0x1053bb7c8</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>要正在运行一个协程，asyncio 提供了三种主要机制：</p><ol><li><p><code>asyncio.run()</code> 函数用来运行最高层级的入口点 “main()” 函数</p></li><li><p><code>await</code> 一个协程。以下代码会在等待 1 秒后打印“hello”，然后等待 2 秒后打印“world”。（await 一个协程会让其开始运行，并等待其完成）</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> time

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">say_after</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> what<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>what<span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;started at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> say_after<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> say_after<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;finished at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># started at 17:13:52</span>
<span class="token comment"># hello</span>
<span class="token comment"># world</span>
<span class="token comment"># finished at 17:13:55</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>asyncio.create_task()</code> 函数用来并发运行作为 asyncio 任务的多个协程。（create_task()之后会使任务出于就绪状态随时准备运行，而 await task 则是等待这个任务运行完成）</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    task1 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>
        say_after<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    task2 <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>
        say_after<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;started at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token comment"># Wait until both tasks are completed (should take</span>
    <span class="token comment"># around 2 seconds.)</span>
    <span class="token keyword">await</span> task1
    <span class="token keyword">await</span> task2

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;finished at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 比上面的要快1秒，因为两个task是同时运行的</span>
<span class="token comment"># started at 17:14:32</span>
<span class="token comment"># hello</span>
<span class="token comment"># world</span>
<span class="token comment"># finished at 17:14:34</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="可等待对象-awaitable-objects" tabindex="-1"><a class="header-anchor" href="#可等待对象-awaitable-objects"><span>可等待对象 awaitable objects</span></a></h3><p>如果一个对象可以在 await 语句中使用，那么它就是 awaitable 对象。许多 asyncio API 都被设计为接受 awaitable 对象。</p><p>可等待 对象有三种主要类型：协程（Coroutine）、任务（Task）、Future。</p><h3 id="协程-1" tabindex="-1"><a class="header-anchor" href="#协程-1"><span>协程</span></a></h3><p>Python 协程属于可等待对象，因此可以在其他协程中被等待：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">nested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">42</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Nothing happens if we just call &quot;nested()&quot;.</span>
    <span class="token comment"># A coroutine object is created but not awaited,</span>
    <span class="token comment"># so it *won&#39;t run at all*.</span>
    nested<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 这个不会运行，只是单纯返回了一个coroutine对象</span>

    <span class="token comment"># Let&#39;s do it differently now and await it:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> nested<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># will print &quot;42&quot;.  # 这里会运行，因为有await</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重要</strong></p><p>在本文档中 &quot;协程&quot; 可用来表示两个紧密关联的概念:</p><ul><li><em>协程函数</em>: 定义形式为  <code>[async def](https://docs.python.org/zh-cn/3/reference/compound_stmts.html#async-def)</code>  的函数;</li><li><em>协程对象</em>: 调用  <em>协程函数</em>  所返回的对象。</li></ul><h3 id="任务" tabindex="-1"><a class="header-anchor" href="#任务"><span>任务</span></a></h3><p>Task 被用来 “并行地” 调度协程。</p><p>当一个协程通过 asyncio.create_task() 等函数被封装为了一个 Task，该协程会被自动调度执行：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">nested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">42</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Schedule nested() to run soon concurrently</span>
    <span class="token comment"># with &quot;main()&quot;.</span>
    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>nested<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 这里 task 就开始运行了</span>

    <span class="token comment"># &quot;task&quot; can now be used to cancel &quot;nested()&quot;, or</span>
    <span class="token comment"># can simply be awaited to wait until it is complete:</span>
    <span class="token keyword">await</span> task  <span class="token comment"># 这里只是单纯地等待其运行完</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="futures" tabindex="-1"><a class="header-anchor" href="#futures"><span>Futures</span></a></h3><p>Future 是一种特殊的 <strong>低层级</strong> 可等待对象，表示一个异步操作的 <strong>最终结果</strong>。</p><p>当一个 Future 对象 <em>被等待</em>，这意味着协程将保持等待直到该 Future 对象在其他地方操作完毕。</p><p>在 asyncio 中需要 Future 对象以便允许 async/await 使用基于回调的代码。</p><p>通常情况下 <strong>没有必要</strong> 在应用层级的代码中创建 Future 对象。</p><p>Future 对象有时会由库和某些 asyncio API 暴露给用户，用作可等待对象：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> function_that_returns_a_future_object<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># this is also valid:</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>
        function_that_returns_a_future_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        some_python_coroutine<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个很好的返回对象的低层级函数的示例是：loop.run_in_executor()</p><h3 id="运行-asyncio-程序" tabindex="-1"><a class="header-anchor" href="#运行-asyncio-程序"><span>运行 asyncio 程序</span></a></h3><p><code>asyncio.run(coro, *, debug=False)</code></p><p>执行 coro 并返回结果。</p><p>吃函数会运行传入的协程，负责管理 asyncio 事件循环，终结异步生成器，并关闭线程池。</p><p>但有其他 asyncio 事件循环在同一线程中运行时，此函数不能被调用。</p><p>如果 debug 为 True，事件循环将以调试模式运行。</p><p>此函数<strong>总是会创建一个新的事件循环</strong>并在结束时关闭之。它应当用作 asyncio 程序的主入口点，理想情况下应当只被调用一次。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建任务" tabindex="-1"><a class="header-anchor" href="#创建任务"><span>创建任务</span></a></h3><p><code>asyncio.create_task(coro, *, name=None)</code></p><p>将 coro 封装为一个 Task 并调度其执行。返回 Task 对象。</p><p>name 不为 None 时，它将使用 Task.set_name() 来设为任务的名称。</p><p>该任务会在 get_running_loop() 返回的循环中执行，如果当前线程没有在运行的循环则会引发 RuntimeError。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>需要保存这个方法返回值 Task 的引用，因为 event_loop 中只会保存一个弱引用，如果不保存引用，可能这个协程没有被执行完毕就被垃圾回收给清理了。</p></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>background_tasks <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>some_coro<span class="token punctuation">(</span>param<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># Add task to the set. This creates a strong reference.</span>
    background_tasks<span class="token punctuation">.</span>add<span class="token punctuation">(</span>task<span class="token punctuation">)</span>

    <span class="token comment"># To prevent keeping references to finished tasks forever,</span>
    <span class="token comment"># make each task remove its own reference from the set after</span>
    <span class="token comment"># completion:</span>
    task<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>background_tasks<span class="token punctuation">.</span>discard<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="休眠" tabindex="-1"><a class="header-anchor" href="#休眠"><span>休眠</span></a></h3><p><code>coroutine asyncio.sleep(delay, result=None)</code></p><p>阻塞 delay 指定的秒数。</p><p>如果指定了 result，则当协程完成时 result 其返回给调用者。</p><p>sleep() 总是会挂起当前任务，以允许其他任务运行。</p><p>将 delay 设为 0 将提供一个经优化的路径以允许其他任务运行。 这可供长期间运行的函数使用以避免在函数调用的全过程中阻塞事件循环。</p><p>以下协程示例运行 5 秒，每秒显示一次当前日期:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> datetime

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">display_date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    end_time <span class="token operator">=</span> loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5.0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loop<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> end_time<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>display_date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="并发运行任务" tabindex="-1"><a class="header-anchor" href="#并发运行任务"><span>并发运行任务</span></a></h3><p><code>awaitable asyncio.gather(*aws, return_exceptions=False)</code></p><p><em>并发</em> 运行 aws 序列中的 可等待对象。</p><p>如果 aws 中的某个可等待对象为协程，它将自动被作为一个任务调度。</p><p>如果所有可等待对象都成功完成，结果将是一个由所有返回值聚合而层的列表。结果值的顺序与 aws 中可等待对象的<strong>顺序一致</strong>。</p><p>如果 return_exceptions 为 False，所引发的首个异常会立即传播给等待 gather() 的任务。aws 序列中的其他可等待对象 <strong>不会被取消</strong> 并继续运行。</p><p>如果 return_exceptions 为 True，异常会和成功的结果一样处理，并聚合至结果列表。</p><p>如果 gather() 被取消，所有被提交（尚未完成）的可等待对象也会 被取消。</p><p>如果 aws 序列中的任一 Task 或 Future 对象 被取消，它将被当作引发了 CancelledError 一样处理 — 在此情况下 gather() 调用 <strong>不会</strong> 被取消。这是为了防止一个已提交的 Task/Future 被取消导致其他 Tasks/Future 也被取消。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Task </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: Compute factorial(</span><span class="token interpolation"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span><span class="token string">), currently i=</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">...&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        f <span class="token operator">*=</span> i
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Task </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">: factorial(</span><span class="token interpolation"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span><span class="token string">) = </span><span class="token interpolation"><span class="token punctuation">{</span>f<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> f

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Schedule three calls *concurrently*:</span>
    L <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>
        factorial<span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        factorial<span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        factorial<span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Expected output:</span>
<span class="token comment">#</span>
<span class="token comment">#     Task A: Compute factorial(2), currently i=2...</span>
<span class="token comment">#     Task B: Compute factorial(3), currently i=2...</span>
<span class="token comment">#     Task C: Compute factorial(4), currently i=2...</span>
<span class="token comment">#     Task A: factorial(2) = 2</span>
<span class="token comment">#     Task B: Compute factorial(3), currently i=3...</span>
<span class="token comment">#     Task C: Compute factorial(4), currently i=3...</span>
<span class="token comment">#     Task B: factorial(3) = 6</span>
<span class="token comment">#     Task C: Compute factorial(4), currently i=4...</span>
<span class="token comment">#     Task C: factorial(4) = 24</span>
<span class="token comment">#     [2, 6, 24]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>如果  <em>return_exceptions</em>  为 False，则在 gather() 被标记为已完成后取消它将不会取消任何已提交的可等待对象。 例如，在将一个异常传播给调用者之后，gather 可被标记为已完成，因此，在从 gather 捕获一个（由可等待对象所引发的）异常之后调用  <code>gather.cancel()</code>  将不会取消任何其他可等待对象。</p></div><h3 id="屏蔽取消操作" tabindex="-1"><a class="header-anchor" href="#屏蔽取消操作"><span>屏蔽取消操作</span></a></h3><p><code>awaitable asyncio.shield(aw)</code></p>`,66),A={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio-awaitables",target:"_blank",rel:"noopener noreferrer"},I={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.Task.cancel",target:"_blank",rel:"noopener noreferrer"},P=n("p",null,[s("如果  "),n("em",null,"aw"),s("  是一个协程，它将自动被作为任务调度。")],-1),S=n("p",null,"以下语句:",-1),B=n("p",null,[n("code",null,"res = **await** shield(something())")],-1),O=n("p",null,"相当于:",-1),N=n("p",null,[n("code",null,"res = **await** something()")],-1),L=n("em",null,"不同之处",-1),j=n("code",null,"something()",-1),Q=n("code",null,"something()",-1),R={href:"https://docs.python.org/zh-cn/3/library/asyncio-exceptions.html#asyncio.CancelledError",target:"_blank",rel:"noopener noreferrer"},D=n("h3",{id:"超时",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#超时"},[n("span",null,"超时")])],-1),W=n("p",null,[n("code",null,"coroutine asyncio.wait_for(aw, timeout)")],-1),X=n("em",null,"aw",-1),M={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio-awaitables",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,[s("如果  "),n("em",null,"aw"),s("  是一个协程，它将自动被作为任务调度。")],-1),V=n("p",null,[n("em",null,"timeout"),s("  可以为  "),n("code",null,"None"),s("，也可以为 float 或 int 型数值表示的等待秒数。如果  "),n("em",null,"timeout"),s("  为  "),n("code",null,"None"),s("，则等待直到完成。")],-1),Z={href:"https://docs.python.org/zh-cn/3/library/asyncio-exceptions.html#asyncio.TimeoutError",target:"_blank",rel:"noopener noreferrer"},G={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.Task.cancel",target:"_blank",rel:"noopener noreferrer"},H={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.shield",target:"_blank",rel:"noopener noreferrer"},J=e(`<p>此函数将等待直到 Future 确实被取消，所以总等待时间可能超过  <em>timeout</em>。 如果在取消期间发生了异常，异常将会被传播。</p><p>如果等待被取消，则  <em>aw</em>  指定的对象也会被取消。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">eternity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Sleep for one hour</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;yay!&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Wait for at most 1 second</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait_for<span class="token punctuation">(</span>eternity<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> asyncio<span class="token punctuation">.</span>TimeoutError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;timeout!&#39;</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Expected output:</span>
<span class="token comment">#</span>
<span class="token comment">#     timeout!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单等待" tabindex="-1"><a class="header-anchor" href="#简单等待"><span>简单等待</span></a></h3>`,4),K=n("em",null,"aws",-1),Y={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio-awaitables",target:"_blank",rel:"noopener noreferrer"},$=n("em",null,"return_when",-1),nn=n("p",null,[n("em",null,"aws"),s("  可迭代对象必须不为空。")],-1),sn=n("p",null,[s("返回两个 Task/Future 集合: "),n("code",null,"(done, pending)"),s("。")],-1),an=n("p",null,"用法：",-1),tn=n("p",null,[n("code",null,"done, pending = **await** asyncio.wait(aws)")],-1),en=n("p",null,[s("如指定  "),n("em",null,"timeout"),s(" (float 或 int 类型) 则它将被用于控制返回之前等待的最长秒数。")],-1),on={href:"https://docs.python.org/zh-cn/3/library/asyncio-exceptions.html#asyncio.TimeoutError",target:"_blank",rel:"noopener noreferrer"},pn=e("<p><em>return_when</em>  指定此函数应在何时返回。它必须为以下常数之一:</p><table><thead><tr><th>常量</th><th>描述</th></tr></thead><tbody><tr><td>FIRST_COMPLETED</td><td>函数将在任意可等待对象结束或取消时返回。</td></tr><tr><td>FIRST_EXCEPTION</td><td>函数将在任意可等待对象因引发异常而结束时返回。当没有引发任何异常时它就相当于  ALL_COMPLETED。</td></tr><tr><td>ALL_COMPLETED</td><td>函数将在所有可等待对象结束或取消时返回。</td></tr></tbody></table><p><code>asyncio.as_completed(aws, *, timeout=None)</code></p>",3),cn=n("em",null,"aws",-1),ln={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio-awaitables",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://docs.python.org/zh-cn/3/library/asyncio-exceptions.html#asyncio.TimeoutError",target:"_blank",rel:"noopener noreferrer"},un=e(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> coro <span class="token keyword">in</span> as_completed<span class="token punctuation">(</span>aws<span class="token punctuation">)</span><span class="token punctuation">:</span>
    earliest_result <span class="token operator">=</span> <span class="token keyword">await</span> coro
    <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在线程中运行" tabindex="-1"><a class="header-anchor" href="#在线程中运行"><span>在线程中运行</span></a></h3><p><code>coroutine asyncio.to_thread(func, /, *args, **kwargs)</code></p><p>在不同的线程中异步地运行函数  <em>func</em>。</p>`,4),dn={href:"https://docs.python.org/zh-cn/3/library/contextvars.html#contextvars.Context",target:"_blank",rel:"noopener noreferrer"},kn=e(`<p>返回一个可被等待以获取  <em>func</em>  的最终结果的协程。</p><p>这个协程函数主要是用于执行在其他情况下会阻塞事件循环的 IO 密集型函数/方法。 例如:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">blocking_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;start blocking_io at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment"># Note that time.sleep() can be replaced with any blocking</span>
    <span class="token comment"># IO-bound operation, such as file operations.</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;blocking_io complete at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;started main at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>
        asyncio<span class="token punctuation">.</span>to_thread<span class="token punctuation">(</span>blocking_io<span class="token punctuation">)</span><span class="token punctuation">,</span>
        asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;finished main at </span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%X&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Expected output:</span>
<span class="token comment">#</span>
<span class="token comment"># started main at 19:50:53</span>
<span class="token comment"># start blocking_io at 19:50:53</span>
<span class="token comment"># blocking_io complete at 19:50:54</span>
<span class="token comment"># finished main at 19:50:54</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在任何协程中直接调用  blocking_io() 将会在调用期间阻塞事件循环，导致额外的 1 秒运行时间。 而通过改用  asyncio.to_thread()，我们可以在不同的线程中运行它从而不会阻塞事件循环。</p><h3 id="跨线程调度" tabindex="-1"><a class="header-anchor" href="#跨线程调度"><span>跨线程调度</span></a></h3><p><code>asyncio.run_coroutine_threadsafe(coro, loop)</code></p><p>向指定事件循环提交一个协程。（线程安全）</p>`,7),hn={href:"https://docs.python.org/zh-cn/3/library/concurrent.futures.html#concurrent.futures.Future",target:"_blank",rel:"noopener noreferrer"},mn=e(`<p>此函数应该从另一个 OS 线程中调用，而非事件循环运行所在线程。示例:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># Create a coroutine</span>
coro <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment"># Submit the coroutine to a given loop</span>
future <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>run_coroutine_threadsafe<span class="token punctuation">(</span>coro<span class="token punctuation">,</span> loop<span class="token punctuation">)</span>

<span class="token comment"># Wait for the result with an optional timeout argument</span>
<span class="token keyword">assert</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在协程内产生了异常，将会通知返回的 Future 对象。它也可被用来取消事件循环中的任务:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
<span class="token keyword">except</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>TimeoutError<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;The coroutine took too long, cancelling the task...&#39;</span><span class="token punctuation">)</span>
    future<span class="token punctuation">.</span>cancel<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> exc<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;The coroutine raised an exception: </span><span class="token interpolation"><span class="token punctuation">{</span>exc<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;The coroutine returned: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),vn={href:"https://docs.python.org/zh-cn/3/library/asyncio-dev.html#asyncio-multithreading",target:"_blank",rel:"noopener noreferrer"},yn=n("p",null,[s("不同与其他 asyncio 函数，此函数要求显式地传入  "),n("em",null,"loop"),s("  参数。")],-1),bn=n("h3",{id:"内省",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#内省"},[n("span",null,"内省")])],-1),_n=n("p",null,[n("code",null,"asyncio.**current_task**(*loop=None*)")],-1),gn={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.Task",target:"_blank",rel:"noopener noreferrer"},fn=n("code",null,"None",-1),wn=n("em",null,"loop",-1),xn=n("code",null,"None",-1),zn={href:"https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio.get_running_loop",target:"_blank",rel:"noopener noreferrer"},Tn=n("p",null,[n("code",null,"asyncio.**all_tasks**(*loop=None*)")],-1),qn={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.Task",target:"_blank",rel:"noopener noreferrer"},En=n("em",null,"loop",-1),Fn=n("code",null,"None",-1),Cn={href:"https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio.get_running_loop",target:"_blank",rel:"noopener noreferrer"},An=n("h3",{id:"task-对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#task-对象"},[n("span",null,"Task 对象")])],-1),In=n("p",null,[n("code",null,"class asyncio.Task(coro, *, loop=None, name=None)")],-1),Pn=n("code",null,"[Future 类似](https://docs.python.org/zh-cn/3/library/asyncio-future.html#asyncio.Future)",-1),Sn={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#coroutine",target:"_blank",rel:"noopener noreferrer"},Bn=n("p",null,[s("Task 对象被用来在事件循环中运行协程。如果一个协程在等待一个 Future 对象，Task 对象会挂起该协程的执行并等待该 Future 对象完成。当该 Future 对象  "),n("em",null,"完成"),s("，被打包的协程将恢复执行。")],-1),On=n("p",null,"事件循环使用协同日程调度: 一个事件循环每次运行一个 Task 对象。而一个 Task 对象会等待一个 Future 对象完成，该事件循环会运行其他 Task、回调或执行 IO 操作。",-1),Nn={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.create_task",target:"_blank",rel:"noopener noreferrer"},Ln={href:"https://docs.python.org/zh-cn/3/library/asyncio-eventloop.html#asyncio.loop.create_task",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://docs.python.org/zh-cn/3/library/asyncio-future.html#asyncio.ensure_future",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.Task.cancel",target:"_blank",rel:"noopener noreferrer"},Rn={href:"https://docs.python.org/zh-cn/3/library/asyncio-exceptions.html#asyncio.CancelledError",target:"_blank",rel:"noopener noreferrer"},Dn={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.Task.cancelled",target:"_blank",rel:"noopener noreferrer"},Wn={href:"https://docs.python.org/zh-cn/3/library/asyncio-exceptions.html#asyncio.CancelledError",target:"_blank",rel:"noopener noreferrer"},Xn=n("code",null,"True",-1),Mn={href:"https://docs.python.org/zh-cn/3/library/asyncio-task.html#asyncio.Task",target:"_blank",rel:"noopener noreferrer"},Un={href:"https://docs.python.org/zh-cn/3/library/asyncio-future.html#asyncio.Future",target:"_blank",rel:"noopener noreferrer"},Vn={href:"https://docs.python.org/zh-cn/3/library/asyncio-future.html#asyncio.Future.set_result",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://docs.python.org/zh-cn/3/library/asyncio-future.html#asyncio.Future.set_exception",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://docs.python.org/zh-cn/3/library/contextvars.html#module-contextvars",target:"_blank",rel:"noopener noreferrer"},Hn=n("ul",null,[n("li",null,"cancel(msg=None)：取消任务，这将抛出 CancelledError"),n("li",null,"done()：如果 Task 对象已完成，则返回 true"),n("li",null,"result()：返回 Task 的结果"),n("li",null,"add_done_callback(callback, *, context=None)：添加一个回调，在 Task 完成时调用。")],-1),Jn=n("h2",{id:"stream-流-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#stream-流-2"},[n("span",null,"Stream 流 [^2]")])],-1),Kn={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-stream.html",target:"_blank",rel:"noopener noreferrer"},Yn=e(`<p>流是用于处理网络连接的支持 async/await 的高层级原语。 流允许发送和接收数据，而不需要使用回调或低级协议和传输。</p><h3 id="stream-函数" tabindex="-1"><a class="header-anchor" href="#stream-函数"><span>Stream 函数</span></a></h3><ul><li>open_connection</li><li>start_server</li></ul><h3 id="unix-套接字-socket" tabindex="-1"><a class="header-anchor" href="#unix-套接字-socket"><span>Unix 套接字（Socket）</span></a></h3><ul><li>open_unix_connection</li><li>start_unix_server</li></ul><h3 id="streamreader-与-streamwriter" tabindex="-1"><a class="header-anchor" href="#streamreader-与-streamwriter"><span>StreamReader 与 StreamWriter</span></a></h3><h3 id="例子-echo-服务器与客户端" tabindex="-1"><a class="header-anchor" href="#例子-echo-服务器与客户端"><span>例子：echo 服务器与客户端</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">handle_echo</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    message <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    addr <span class="token operator">=</span> writer<span class="token punctuation">.</span>get_extra_info<span class="token punctuation">(</span><span class="token string">&#39;peername&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Received </span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token punctuation">{</span>addr<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Send: </span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">await</span> writer<span class="token punctuation">.</span>drain<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Close the connection&quot;</span><span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    server <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>start_server<span class="token punctuation">(</span>
        handle_echo<span class="token punctuation">,</span> <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span>

    addrs <span class="token operator">=</span> <span class="token string">&#39;, &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>sock<span class="token punctuation">.</span>getsockname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> sock <span class="token keyword">in</span> server<span class="token punctuation">.</span>sockets<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Serving on </span><span class="token interpolation"><span class="token punctuation">{</span>addrs<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">async</span> <span class="token keyword">with</span> server<span class="token punctuation">:</span>
        <span class="token keyword">await</span> server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">tcp_echo_client</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>
    reader<span class="token punctuation">,</span> writer <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>open_connection<span class="token punctuation">(</span>
        <span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Send: </span><span class="token interpolation"><span class="token punctuation">{</span>message<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    data <span class="token operator">=</span> <span class="token keyword">await</span> reader<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Received: </span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Close the connection&#39;</span><span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>tcp_echo_client<span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="同步原语-3" tabindex="-1"><a class="header-anchor" href="#同步原语-3"><span>同步原语 <a href="%5B%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD%5D(https://docs.python.org/zh-cn/3.10/library/asyncio-sync.html)">^3</a></span></a></h2>`,10),$n={href:"https://docs.python.org/zh-cn/3.10/library/threading.html#module-threading",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://docs.python.org/zh-cn/3.10/library/threading.html#module-threading",target:"_blank",rel:"noopener noreferrer"},ss=n("em",null,"timeout",-1),as={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.wait_for",target:"_blank",rel:"noopener noreferrer"},ts=e(`<p>asyncio 具有下列基本同步原语:</p><h3 id="lock" tabindex="-1"><a class="header-anchor" href="#lock"><span>Lock</span></a></h3><p><code>class asyncio.Lock</code></p><p>实现一个用于 asyncio 任务的互斥锁。 非线程安全。</p><p>asyncio 锁可被用来保证对共享资源的独占访问。</p><p>使用 Lock 的推荐方式是通过  <code>[async with](https://docs.python.org/zh-cn/3.10/reference/compound_stmts.html#async-with)</code>  语句:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>lock <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># ... later</span>
<span class="token keyword">async</span> <span class="token keyword">with</span> lock<span class="token punctuation">:</span>
    <span class="token comment"># access shared state</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这等价于：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>lock <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># ... later</span>
<span class="token keyword">await</span> lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># access shared state</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>coroutine acquire()</code></p>`,10),es=n("em",null,"unlocked",-1),os=n("em",null,"locked",-1),ps=n("code",null,"True",-1),cs={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-sync.html#asyncio.Lock.acquire",target:"_blank",rel:"noopener noreferrer"},is=n("em",null,"公平的",-1),ls=n("p",null,[n("code",null,"release()")],-1),rs=n("p",null,"释放锁。",-1),us=n("p",null,[s("当锁为  "),n("em",null,"locked"),s("  时，将其设为  "),n("em",null,"unlocked"),s("  并返回。")],-1),ds=n("em",null,"unlocked",-1),ks={href:"https://docs.python.org/zh-cn/3.10/library/exceptions.html#RuntimeError",target:"_blank",rel:"noopener noreferrer"},hs=e('<p><code>locked()</code></p><p>如果锁为  <em>locked</em>  则返回  <code>True</code>。</p><h3 id="event" tabindex="-1"><a class="header-anchor" href="#event"><span>Event</span></a></h3><p><code>class asyncio.Event</code></p><p>事件对象。 该对象不是线程安全的。</p><p>asyncio 事件可被用来通知多个 asyncio 任务已经有事件发生。</p>',6),ms={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-sync.html#asyncio.Event.set",target:"_blank",rel:"noopener noreferrer"},vs=n("em",null,"true",-1),ys={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-sync.html#asyncio.Event.clear",target:"_blank",rel:"noopener noreferrer"},bs=n("em",null,"false",-1),_s={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-sync.html#asyncio.Event.wait",target:"_blank",rel:"noopener noreferrer"},gs=n("em",null,"true",-1),fs=n("em",null,"false",-1),ws=e(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">waiter</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;waiting for it ...&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> event<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;... got it!&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Create an Event object.</span>
    event <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Spawn a Task to wait until &#39;event&#39; is set.</span>
    waiter_task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>waiter<span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># Sleep for 1 second and set the event.</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    event<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Wait until the waiter task is finished.</span>
    <span class="token keyword">await</span> waiter_task

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>coroutine wait()</code></p><p>等待直至事件被设置。</p>`,3),xs=n("code",null,"True",-1),zs={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-sync.html#asyncio.Event.set",target:"_blank",rel:"noopener noreferrer"},Ts=n("p",null,[n("code",null,"set()")],-1),qs=n("p",null,"设置事件。",-1),Es=n("p",null,"所有等待事件被设置的任务将被立即唤醒。",-1),Fs=n("p",null,[n("code",null,"clear()")],-1),Cs=n("p",null,"清空（取消设置）事件。",-1),As={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-sync.html#asyncio.Event.wait",target:"_blank",rel:"noopener noreferrer"},Is={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-sync.html#asyncio.Event.set",target:"_blank",rel:"noopener noreferrer"},Ps=n("p",null,[n("code",null,"is_set()")],-1),Ss=n("p",null,[s("如果事件已被设置则返回  "),n("code",null,"True"),s("。")],-1),Bs=n("h3",{id:"condition",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#condition"},[n("span",null,"Condition")])],-1),Os={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-sync.html#condition",target:"_blank",rel:"noopener noreferrer"},Ns=e('<h3 id="semaphore" tabindex="-1"><a class="header-anchor" href="#semaphore"><span>Semaphore</span></a></h3><h3 id="boundedsemaphore" tabindex="-1"><a class="header-anchor" href="#boundedsemaphore"><span>BoundedSemaphore</span></a></h3><h2 id="队列集合-4" tabindex="-1"><a class="header-anchor" href="#队列集合-4"><span>队列集合 <a href="%5B%E9%98%9F%E5%88%97%E9%9B%86%E5%90%88%5D(https://docs.python.org/zh-cn/3.10/library/asyncio-queue.html)">^4</a></span></a></h2>',3),Ls={href:"https://docs.python.org/zh-cn/3.10/library/queue.html#module-queue",target:"_blank",rel:"noopener noreferrer"},js=n("em",null,"timeout",-1),Qs={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.wait_for",target:"_blank",rel:"noopener noreferrer"},Rs={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-queue.html#examples",target:"_blank",rel:"noopener noreferrer"},Ds=n("h3",{id:"queue",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#queue"},[n("span",null,"Queue")])],-1),Ws=n("p",null,[n("code",null,"class asyncio.Queue(maxsize=0)")],-1),Xs=n("p",null,"FIFO 队列",-1),Ms=n("em",null,"maxsize",-1),Us=n("code",null,"0",-1),Vs=n("em",null,"maxsize",-1),Zs=n("code",null,"await put()",-1),Gs={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-queue.html#asyncio.Queue.get",target:"_blank",rel:"noopener noreferrer"},Hs={href:"https://docs.python.org/zh-cn/3.10/library/queue.html#module-queue",target:"_blank",rel:"noopener noreferrer"},Js={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-queue.html#asyncio.Queue.qsize",target:"_blank",rel:"noopener noreferrer"},Ks=n("li",null,"maxsize",-1),Ys=n("li",null,"empty()",-1),$s=n("li",null,"full()",-1),na=n("li",null,"coroutine join()",-1),sa=n("li",null,"get_nowait() 不阻塞的出队",-1),aa={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-queue.html#asyncio.Queue.task_done",target:"_blank",rel:"noopener noreferrer"},ta={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-queue.html#asyncio.Queue.join",target:"_blank",rel:"noopener noreferrer"},ea=n("li",null,"coroutine put(item)",-1),oa=n("li",null,"put_nowait(item) 不阻塞的入队",-1),pa=n("li",null,"qsize()",-1),ca=n("li",null,"task_done() 表明前面排队的任务已经完成，即 get 出来的元素相关操作已经完成。",-1),ia=n("h3",{id:"优先级队列",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#优先级队列"},[n("span",null,"优先级队列")])],-1),la=n("p",null,[n("code",null,"class asyncio.PriorityQueue")],-1),ra={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-queue.html#asyncio.Queue",target:"_blank",rel:"noopener noreferrer"},ua=e(`<p>条目通常是  <code>(priority_number, data)</code>  形式的元组。</p><h3 id="后进先出队列" tabindex="-1"><a class="header-anchor" href="#后进先出队列"><span><strong>后进先出队列</strong></span></a></h3><p><code>class asyncio.LifoQueue</code></p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> random
<span class="token keyword">import</span> time

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token comment"># Get a &quot;work item&quot; out of the queue.</span>
        sleep_for <span class="token operator">=</span> <span class="token keyword">await</span> queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment"># Sleep for the &quot;sleep_for&quot; seconds.</span>
        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>sleep_for<span class="token punctuation">)</span>

        <span class="token comment"># Notify the queue that the &quot;work item&quot; has been processed.</span>
        queue<span class="token punctuation">.</span>task_done<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> has slept for </span><span class="token interpolation"><span class="token punctuation">{</span>sleep_for<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string"> seconds&#39;</span></span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Create a queue that we will use to store our &quot;workload&quot;.</span>
    queue <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># Generate random timings and put them into the queue.</span>
    total_sleep_time <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sleep_for <span class="token operator">=</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>
        total_sleep_time <span class="token operator">+=</span> sleep_for
        queue<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span>sleep_for<span class="token punctuation">)</span>

    <span class="token comment"># Create three worker tasks to process the queue concurrently.</span>
    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>worker<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;worker-</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">)</span>
        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>

    <span class="token comment"># Wait until the queue is fully processed.</span>
    started_at <span class="token operator">=</span> time<span class="token punctuation">.</span>monotonic<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> queue<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    total_slept_for <span class="token operator">=</span> time<span class="token punctuation">.</span>monotonic<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> started_at

    <span class="token comment"># Cancel our worker tasks.</span>
    <span class="token keyword">for</span> task <span class="token keyword">in</span> tasks<span class="token punctuation">:</span>
        task<span class="token punctuation">.</span>cancel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># Wait until all worker tasks are cancelled.</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">,</span> return_exceptions<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;====&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;3 workers slept in parallel for </span><span class="token interpolation"><span class="token punctuation">{</span>total_slept_for<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string"> seconds&#39;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;total expected sleep time: </span><span class="token interpolation"><span class="token punctuation">{</span>total_sleep_time<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string"> seconds&#39;</span></span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件循环-5" tabindex="-1"><a class="header-anchor" href="#事件循环-5"><span>事件循环 <a href="%5B%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%5D(https://docs.python.org/zh-cn/3.10/library/asyncio-eventloop.html)">^5</a></span></a></h2><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span><strong>前言</strong></span></a></h3><p>事件循环是每个 asyncio 应用的核心。 事件循环会运行异步任务和回调，执行网络 IO 操作，以及运行子进程。</p>`,8),da={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.run",target:"_blank",rel:"noopener noreferrer"},ka=n("h2",{id:"高层级-api-索引-6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#高层级-api-索引-6"},[n("span",null,"高层级 API 索引 [^6]")])],-1),ha={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-api-index.html",target:"_blank",rel:"noopener noreferrer"},ma=e('<p>这个页面列举了所有能用于 async/wait 的高层级 asyncio API 集。</p><h3 id="任务-1" tabindex="-1"><a class="header-anchor" href="#任务-1"><span>任务</span></a></h3><p>运行异步程序，创建 Task 对象，等待多件事运行超时的公共集。</p><table><thead><tr><th>run()</th><th>创建事件循环，运行一个协程，关闭事件循环。</th></tr></thead><tbody><tr><td>create_task()</td><td>启动一个 asyncio 的 Task 对象。</td></tr><tr><td>await sleep()</td><td>休眠几秒。</td></tr><tr><td>await gather()</td><td>并发执行所有事件的调度和等待。</td></tr><tr><td>await wait_for()</td><td>有超时控制的运行。</td></tr><tr><td>await shield()</td><td>屏蔽取消操作</td></tr><tr><td>await wait()</td><td>完成情况的监控器</td></tr><tr><td>current_task()</td><td>返回当前 Task 对象</td></tr><tr><td>all_tasks()</td><td>返回事件循环中所有的 task 对象。</td></tr><tr><td>Task</td><td>Task 对象</td></tr><tr><td>to_thread()</td><td>在不同的 OS 线程中异步地运行一个函数。</td></tr><tr><td>run_coroutine_threadsafe()</td><td>从其他 OS 线程中调度一个协程。</td></tr><tr><td>for in as_completed()</td><td>用  for  循环监控完成情况。</td></tr></tbody></table><p><strong>例子</strong></p>',5),va={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio-example-gather",target:"_blank",rel:"noopener noreferrer"},ya={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio-example-waitfor",target:"_blank",rel:"noopener noreferrer"},ba={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio-example-task-cancel",target:"_blank",rel:"noopener noreferrer"},_a={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio-example-sleep",target:"_blank",rel:"noopener noreferrer"},ga={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#coroutine",target:"_blank",rel:"noopener noreferrer"},fa=e('<h3 id="队列集" tabindex="-1"><a class="header-anchor" href="#队列集"><span><strong>队列集</strong></span></a></h3><p>队列集被用于多个异步 Task 对象的运行调度，实现连接池以及发布/订阅模式。</p><table><thead><tr><th>Queue</th><th>先进先出队列</th></tr></thead><tbody><tr><td>PriorityQueue</td><td>优先级队列。</td></tr><tr><td>LifoQueue</td><td>后进先出队列。</td></tr></tbody></table><p><strong>例子</strong></p>',4),wa={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-queue.html#asyncio-example-queue-dist",target:"_blank",rel:"noopener noreferrer"},xa={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-queue.html#asyncio-queues",target:"_blank",rel:"noopener noreferrer"},za=e('<h3 id="子进程集" tabindex="-1"><a class="header-anchor" href="#子进程集"><span>子进程集</span></a></h3><p>用于生成子进程和运行 shell 命令的工具包。</p><table><thead><tr><th>await create_subprocess_exec()</th><th>创建一个子进程。</th></tr></thead><tbody><tr><td>await create_subprocess_shell()</td><td>运行一个 shell 命令。</td></tr></tbody></table><p><strong>例子</strong></p>',4),Ta={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-subprocess.html#asyncio-example-subprocess-shell",target:"_blank",rel:"noopener noreferrer"},qa={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-subprocess.html#asyncio-subprocess",target:"_blank",rel:"noopener noreferrer"},Ea=e('<h3 id="流" tabindex="-1"><a class="header-anchor" href="#流"><span>流</span></a></h3><p>用于网络 IO 处理的高级 API 集。</p><table><thead><tr><th>await open_connection()</th><th>建立一个 TCP 连接。</th></tr></thead><tbody><tr><td>await open_unix_connection()</td><td>建立一个 Unix socket 连接。</td></tr><tr><td>await start_server()</td><td>启动 TCP 服务。</td></tr><tr><td>await start_unix_server()</td><td>启动一个 Unix 套接字服务。</td></tr><tr><td>StreamReader</td><td>接收网络数据的高级 async/await 对象。</td></tr><tr><td>StreamWriter</td><td>发送网络数据的高级 async/await 对象。</td></tr></tbody></table><p><strong>例子</strong></p>',4),Fa={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-stream.html#asyncio-example-stream",target:"_blank",rel:"noopener noreferrer"},Ca={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-stream.html#asyncio-streams",target:"_blank",rel:"noopener noreferrer"},Aa=e('<h3 id="同步" tabindex="-1"><a class="header-anchor" href="#同步"><span><strong>同步</strong></span></a></h3><p>能被用于 Task 对象集的，类似线程的同步基元组件。</p><table><thead><tr><th>Lock</th><th>互斥锁。</th></tr></thead><tbody><tr><td>Event</td><td>事件对象。</td></tr><tr><td>Condition</td><td>条件对象</td></tr><tr><td>Semaphore</td><td>信号量</td></tr><tr><td>BoundedSemaphore</td><td>有界的信号量。</td></tr></tbody></table><h3 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span><strong>异常</strong></span></a></h3><table><thead><tr><th>asyncio.TimeoutError</th><th>类似  wait_for()  等函数在超时时候被引发。请注意  asyncio.TimeoutError  与内建异常  TimeoutError  无关。</th></tr></thead><tbody><tr><td>asyncio.CancelledError</td><td>当一个 Task 对象被取消的时候被引发。请参阅  Task.cancel()。</td></tr></tbody></table><p><strong>例子</strong></p>',6),Ia={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio-example-task-cancel",target:"_blank",rel:"noopener noreferrer"},Pa={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-exceptions.html#asyncio-exceptions",target:"_blank",rel:"noopener noreferrer"},Sa=n("h2",{id:"关于-never-awaited-协程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关于-never-awaited-协程"},[n("span",null,"关于 never-awaited 协程")])],-1),Ba=n("code",null,"coro()",-1),Oa=n("code",null,"await coro()",-1),Na={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.create_task",target:"_blank",rel:"noopener noreferrer"},La={href:"https://docs.python.org/zh-cn/3.10/library/exceptions.html#RuntimeWarning",target:"_blank",rel:"noopener noreferrer"},ja=e(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;never scheduled&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    test<span class="token punctuation">(</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># test.py:7: RuntimeWarning: coroutine &#39;test&#39; was never awaited</span>
<span class="token comment">#  test()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Qa=n("code",null,"await",-1),Ra={href:"https://docs.python.org/zh-cn/3.10/library/asyncio-task.html#asyncio.create_task",target:"_blank",rel:"noopener noreferrer"},Da=e(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 开始运行并等待完成</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 开始运行</span>
        <span class="token keyword">await</span> task  <span class="token comment"># 等待完成</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function Wa(Xa,Ma){const t=o("ExternalLinkIcon"),p=o("RouteLink");return i(),l("div",null,[n("div",d,[k,n("p",null,[s("这里实际上就是官方文档的搬运，非常不完整，建议直接看"),n("a",h,[s("官方文档"),a(t)]),s("。")])]),m,n("p",null,[s("协程运行的原理见： "),a(p,{to:"/notes/language/python/python-concurrent.html#%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81"},{default:r(()=>[s("协程的原理以及代码")]),_:1})]),v,n("ul",null,[n("li",null,[s("并发地  "),n("a",y,[s("运行 Python 协程"),a(t)]),s("  并对其执行过程实现完全控制;")]),n("li",null,[s("执行  "),n("a",b,[s("网络 IO 和 IPC"),a(t)]),s(";")]),n("li",null,[s("控制  "),n("a",_,[s("子进程"),a(t)]),s(";")]),n("li",null,[s("通过  "),n("a",g,[s("队列"),a(t)]),s("  实现分布式任务;")]),n("li",null,[n("a",f,[s("同步"),a(t)]),s("  并发代码;")])]),w,n("ul",null,[n("li",null,[s("创建和管理  "),n("a",x,[s("事件循环"),a(t)]),s("，以提供异步 API 用于  "),n("a",z,[s("网络化"),a(t)]),s(", 运行  "),n("a",T,[s("子进程"),a(t)]),s("，处理  "),n("a",q,[s("OS 信号"),a(t)]),s("  等等;")]),n("li",null,[s("使用  "),n("a",E,[s("transports"),a(t)]),s("  实现高效率协议;")]),n("li",null,[s("通过 async/await 语法  "),n("a",F,[s("桥接"),a(t)]),s("  基于回调的库和代码。")])]),C,n("p",null,[s("保护一个  "),n("a",A,[s("可等待对象"),a(t)]),s("  防止其被  "),n("a",I,[s("取消"),a(t)]),s("。")]),P,S,B,O,N,n("p",null,[L,s("  在于如果包含它的协程被取消，在  "),j,s("  中运行的任务不会被取消。从  "),Q,s('  的角度看来，取消操作并没有发生。然而其调用者已被取消，因此 "await" 表达式仍然会引发'),n("a",R,[s("CancelledError"),a(t)]),s("。")]),D,W,n("p",null,[s("等待  "),X,s(" "),n("a",M,[s("可等待对象"),a(t)]),s("  完成，指定 timeout 秒数后超时。")]),U,V,n("p",null,[s("如果发生超时，任务将取消并引发  "),n("a",Z,[s("asyncio.TimeoutError"),a(t)]),s(".")]),n("p",null,[s("要避免任务  "),n("a",G,[s("取消"),a(t)]),s("，可以加上  "),n("a",H,[s("shield()"),a(t)]),s("。")]),J,n("p",null,[s("并发地运行  "),K,s("  可迭代对象中的  "),n("a",Y,[s("可等待对象"),a(t)]),s("  并进入阻塞状态直到满足  "),$,s("  所指定的条件。")]),nn,sn,an,tn,en,n("p",null,[s("请注意此函数不会引发  "),n("a",on,[s("asyncio.TimeoutError"),a(t)]),s("。当超时发生时，未完成的 Future 或 Task 将在指定秒数后被返回。")]),pn,n("p",null,[s("并发地运行  "),cn,s("  可迭代对象中的  "),n("a",ln,[s("可等待对象"),a(t)]),s("。 返回一个协程的迭代器。 所返回的每个协程可被等待以从剩余的可等待对象的可迭代对象中获得最早的下一个结果。")]),n("p",null,[s("如果在所有 Future 对象完成前发生超时则将引发  "),n("a",rn,[s("asyncio.TimeoutError"),a(t)]),s("。")]),un,n("p",null,[s("向此函数提供的任何 *args 和 **kwargs 会被直接传给  *func*。 并且，当前  "),n("a",dn,[s("contextvars.Context"),a(t)]),s("  会被传播，允许在不同的线程中访问来自事件循环的上下文变量。")]),kn,n("p",null,[s("返回一个  "),n("a",hn,[s("concurrent.futures.Future"),a(t)]),s("  以等待来自其他 OS 线程的结果。")]),mn,n("p",null,[s("参见  "),n("a",vn,[s("concurrency and multithreading"),a(t)]),s("  部分的文档。")]),yn,bn,_n,n("p",null,[s("返回当前运行的  "),n("a",gn,[s("Task"),a(t)]),s("  实例，如果没有正在运行的任务则返回  "),fn,s("。 如果  "),wn,s("  为  "),xn,s("  则会使用  "),n("a",zn,[s("get_running_loop()"),a(t)]),s("  获取当前事件循环。")]),Tn,n("p",null,[s("返回事件循环所运行的未完成的  "),n("a",qn,[s("Task"),a(t)]),s("  对象的集合。 如果  "),En,s("  为  "),Fn,s("，则会使用  "),n("a",Cn,[s("get_running_loop()"),a(t)]),s("  获取当前事件循环。")]),An,In,n("p",null,[s("一个与  "),Pn,s("  的对象，可运行 Python "),n("a",Sn,[s("协程"),a(t)]),s("。非线程安全。")]),Bn,On,n("p",null,[s("使用高层级的  "),n("a",Nn,[s("asyncio.create_task()"),a(t)]),s("  函数来创建 Task 对象，也可用低层级的  "),n("a",Ln,[s("loop.create_task()"),a(t)]),s("  或  "),n("a",jn,[s("ensure_future()"),a(t)]),s("  函数。不建议手动实例化 Task 对象。")]),n("p",null,[s("要取消一个正在运行的 Task 对象可使用  "),n("a",Qn,[s("cancel()"),a(t)]),s("  方法。调用此方法将使该 Task 对象抛出一个  "),n("a",Rn,[s("CancelledError"),a(t)]),s("  异常给打包的协程。如果取消期间一个协程正在等待一个 Future 对象，该 Future 对象也将被取消。")]),n("p",null,[n("a",Dn,[s("cancelled()"),a(t)]),s("  可被用来检测 Task 对象是否被取消。如果打包的协程没有抑制  "),n("a",Wn,[s("CancelledError"),a(t)]),s("  异常并且确实被取消，该方法将返回  "),Xn,s("。")]),n("p",null,[n("a",Mn,[s("asyncio.Task"),a(t)]),s("  从  "),n("a",Un,[s("Future"),a(t)]),s("  继承了其除  "),n("a",Vn,[s("Future.set_result()"),a(t)]),s("  和  "),n("a",Zn,[s("Future.set_exception()"),a(t)]),s("  以外的所有 API。")]),n("p",null,[s("Task 对象支持  "),n("a",Gn,[s("contextvars"),a(t)]),s("  模块。当一个 Task 对象被创建，它将复制当前上下文，然后在复制的上下文中运行其协程。")]),Hn,Jn,n("p",null,[s("[^2]: "),n("a",Kn,[s("Stream 流"),a(t)])]),Yn,n("p",null,[s("asyncio 同步原语被设计为与  "),n("a",$n,[s("threading"),a(t)]),s("  模块的类似，但有两个关键注意事项:")]),n("ul",null,[n("li",null,[s("asyncio 原语不是线程安全的，因此它们不应被用于 OS 线程同步 (而应当使用  "),n("a",ns,[s("threading"),a(t)]),s(")；")]),n("li",null,[s("这些同步原语的方法不接受  "),ss,s("  参数；请使用  "),n("a",as,[s("asyncio.wait_for()"),a(t)]),s("  函数来执行带有超时的操作。")])]),ts,n("p",null,[s("获取锁。 此方法会等待直至锁为  "),es,s("，将其设为  "),os,s("  并返回  "),ps,s("。 当有一个以上的协程在  "),n("a",cs,[s("acquire()"),a(t)]),s("  中被阻塞则会等待解锁，最终只有一个协程会被执行。 锁的获取是  "),is,s(": 被执行的协程将是第一个开始等待锁的协程。")]),ls,rs,us,n("p",null,[s("如果锁为  "),ds,s("，则会引发  "),n("a",ks,[s("RuntimeError"),a(t)]),s("。")]),hs,n("p",null,[s("Event 对象会管理一个内部旗标，可通过  "),n("a",ms,[s("set()"),a(t)]),s("  方法将其设为  "),vs,s("  并通过  "),n("a",ys,[s("clear()"),a(t)]),s("  方法将其重设为  "),bs,s("。 "),n("a",_s,[s("wait()"),a(t)]),s("  方法会阻塞直至该旗标被设为  "),gs,s("。 该旗标初始时会被设为  "),fs,s("。")]),ws,n("p",null,[s("如果事件已被设置，则立即返回  "),xs,s("。 否则将阻塞直至另一个任务调用  "),n("a",zs,[s("set()"),a(t)]),s("。")]),Ts,qs,Es,Fs,Cs,n("p",null,[s("通过  "),n("a",As,[s("wait()"),a(t)]),s("  进行等待的任务现在将会阻塞直至  "),n("a",Is,[s("set()"),a(t)]),s("  方法被再次调用。")]),Ps,Ss,Bs,n("p",null,[n("a",Os,[s("https://docs.python.org/zh-cn/3.10/library/asyncio-sync.html#condition"),a(t)])]),Ns,n("p",null,[s("asyncio 队列被设计成与  "),n("a",Ls,[s("queue"),a(t)]),s("  模块类似。尽管 asyncio 队列不是线程安全的，但是他们是被设计专用于 async/await 代码。")]),n("p",null,[s("注意 asyncio 的队列没有  "),js,s("  形参；请使用  "),n("a",Qs,[s("asyncio.wait_for()"),a(t)]),s("  函数为队列添加超时操作。")]),n("p",null,[s("参见下面的  "),n("a",Rs,[s("Examples"),a(t)]),s("  部分。")]),Ds,Ws,Xs,n("p",null,[s("如果  "),Ms,s("  小于等于零，则队列尺寸是无限的。如果是大于  "),Us,s("  的整数，则当队列达到  "),Vs,s("  时， "),Zs,s("  将阻塞至某个元素被  "),n("a",Gs,[s("get()"),a(t)]),s("  取出。")]),n("p",null,[s("不像标准库中的并发型  "),n("a",Hs,[s("queue"),a(t)]),s(" ，队列的尺寸一直是已知的，可以通过调用  "),n("a",Js,[s("qsize()"),a(t)]),s("  方法返回。")]),n("ul",null,[Ks,Ys,$s,na,sa,n("li",null,[s("coroutine join() 阻塞至队列中所有的元素都被接收和处理完毕。 "),n("ul",null,[n("li",null,[s("当条目添加到队列的时候，未完成任务的计数就会增加。每当消费协程调用  "),n("a",aa,[s("task_done()"),a(t)]),s("表示这个条目已经被回收，该条目所有工作已经完成，未完成计数就会减少。当未完成计数降到零的时候， "),n("a",ta,[s("join()"),a(t)]),s("阻塞被解除。")])])]),ea,oa,pa,ca]),ia,la,n("p",null,[n("a",ra,[s("Queue"),a(t)]),s("  的变体；按优先级顺序取出条目 (最小的先取出)。")]),ua,n("p",null,[s("应用开发者通常应当使用高层级的 asyncio 函数，例如  "),n("a",da,[s("asyncio.run()"),a(t)]),s("，应当很少有必要引用循环对象或调用其方法。 本节所针对的主要是低层级代码、库和框架的编写者，他们需要更细致地控制事件循环行为。")]),ka,n("p",null,[s("[^6]: "),n("a",ha,[s("高层级 API 索引"),a(t)])]),ma,n("ul",null,[n("li",null,[n("a",va,[s("使用 asyncio.gather() 并行运行"),a(t)]),s(".")]),n("li",null,[n("a",ya,[s("使用 asyncio.wait_for() 强制超时"),a(t)]),s(".")]),n("li",null,[n("a",ba,[s("撤销协程"),a(t)]),s(".")]),n("li",null,[n("a",_a,[s("asyncio.sleep() 的用法"),a(t)]),s(".")]),n("li",null,[s("请主要参阅  "),n("a",ga,[s("协程与任务文档"),a(t)]),s(".")])]),fa,n("ul",null,[n("li",null,[n("a",wa,[s("使用 asyncio.Queue 在多个并发任务间分配工作量"),a(t)]),s(".")]),n("li",null,[s("请参阅  "),n("a",xa,[s("队列集文档"),a(t)]),s(".")])]),za,n("ul",null,[n("li",null,[n("a",Ta,[s("执行一个 shell 命令"),a(t)]),s(".")]),n("li",null,[s("请参阅  "),n("a",qa,[s("子进程 APIs"),a(t)]),s("  相关文档.")])]),Ea,n("ul",null,[n("li",null,[n("a",Fa,[s("TCP 客户端样例"),a(t)]),s(".")]),n("li",null,[s("请参阅  "),n("a",Ca,[s("streams APIs"),a(t)]),s("  文档。")])]),Aa,n("ul",null,[n("li",null,[n("a",Ia,[s("在取消请求发生的运行代码中如何处理 CancelledError 异常"),a(t)]),s(".")]),n("li",null,[s("请参阅完整的  "),n("a",Pa,[s("asyncio 专用异常"),a(t)]),s("  列表.")])]),Sa,n("p",null,[s("当协程函数被调用而不是被等待时 (即执行  "),Ba,s("  而不是  "),Oa,s(") 或者协程没有通过  "),n("a",Na,[s("asyncio.create_task()"),a(t)]),s("  被排入计划日程，asyncio 将会发出一条  "),n("a",La,[s("RuntimeWarning"),a(t)]),s(":")]),ja,n("p",null,[s("通常的修复方法是 "),Qa,s(" 协程或者调用  "),n("a",Ra,[s("asyncio.create_task()"),a(t)]),s("  函数:")]),Da])}const Za=c(u,[["render",Wa],["__file","python-asyncio.html.vue"]]),Ga=JSON.parse('{"path":"/notes/language/python/python-asyncio.html","title":"Python异步I/O与协程","lang":"zh-CN","frontmatter":{"title":"Python异步I/O与协程","order":31,"date":"2023-09-10T00:00:00.000Z","category":["笔记","API"],"tag":["Python","并发","异步IO","协程"],"description":"注意 这里实际上就是官方文档的搬运，非常不完整，建议直接看官方文档。 asyncio — 异步 I/O & 协程 协程运行的原理见： asyncio 是用来编写 并发 代码的库，使用 async/await 语法。 asyncio 被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。 asyncio...","head":[["meta",{"property":"og:url","content":"http://ek0wraith.top/notes/language/python/python-asyncio.html"}],["meta",{"property":"og:site_name","content":"Ek0wraith"}],["meta",{"property":"og:title","content":"Python异步I/O与协程"}],["meta",{"property":"og:description","content":"注意 这里实际上就是官方文档的搬运，非常不完整，建议直接看官方文档。 asyncio — 异步 I/O & 协程 协程运行的原理见： asyncio 是用来编写 并发 代码的库，使用 async/await 语法。 asyncio 被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。 asyncio..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Ek0wraith"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"异步IO"}],["meta",{"property":"article:tag","content":"协程"}],["meta",{"property":"article:published_time","content":"2023-09-10T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python异步I/O与协程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-10T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Ek0wraith\\",\\"url\\":\\"http://ek0wraith.top/\\"}]}"]]},"headers":[{"level":2,"title":"asyncio — 异步 I/O & 协程","slug":"asyncio-—-异步-i-o-协程","link":"#asyncio-—-异步-i-o-协程","children":[]},{"level":2,"title":"协程与任务 ^1","slug":"协程与任务-1","link":"#协程与任务-1","children":[{"level":3,"title":"协程","slug":"协程","link":"#协程","children":[]},{"level":3,"title":"可等待对象 awaitable objects","slug":"可等待对象-awaitable-objects","link":"#可等待对象-awaitable-objects","children":[]},{"level":3,"title":"协程","slug":"协程-1","link":"#协程-1","children":[]},{"level":3,"title":"任务","slug":"任务","link":"#任务","children":[]},{"level":3,"title":"Futures","slug":"futures","link":"#futures","children":[]},{"level":3,"title":"运行 asyncio 程序","slug":"运行-asyncio-程序","link":"#运行-asyncio-程序","children":[]},{"level":3,"title":"创建任务","slug":"创建任务","link":"#创建任务","children":[]},{"level":3,"title":"休眠","slug":"休眠","link":"#休眠","children":[]},{"level":3,"title":"并发运行任务","slug":"并发运行任务","link":"#并发运行任务","children":[]},{"level":3,"title":"屏蔽取消操作","slug":"屏蔽取消操作","link":"#屏蔽取消操作","children":[]},{"level":3,"title":"超时","slug":"超时","link":"#超时","children":[]},{"level":3,"title":"简单等待","slug":"简单等待","link":"#简单等待","children":[]},{"level":3,"title":"在线程中运行","slug":"在线程中运行","link":"#在线程中运行","children":[]},{"level":3,"title":"跨线程调度","slug":"跨线程调度","link":"#跨线程调度","children":[]},{"level":3,"title":"内省","slug":"内省","link":"#内省","children":[]},{"level":3,"title":"Task 对象","slug":"task-对象","link":"#task-对象","children":[]}]},{"level":2,"title":"Stream 流 [^2]","slug":"stream-流-2","link":"#stream-流-2","children":[{"level":3,"title":"Stream 函数","slug":"stream-函数","link":"#stream-函数","children":[]},{"level":3,"title":"Unix 套接字（Socket）","slug":"unix-套接字-socket","link":"#unix-套接字-socket","children":[]},{"level":3,"title":"StreamReader 与 StreamWriter","slug":"streamreader-与-streamwriter","link":"#streamreader-与-streamwriter","children":[]},{"level":3,"title":"例子：echo 服务器与客户端","slug":"例子-echo-服务器与客户端","link":"#例子-echo-服务器与客户端","children":[]}]},{"level":2,"title":"同步原语 ^3","slug":"同步原语-3","link":"#同步原语-3","children":[{"level":3,"title":"Lock","slug":"lock","link":"#lock","children":[]},{"level":3,"title":"Event","slug":"event","link":"#event","children":[]},{"level":3,"title":"Condition","slug":"condition","link":"#condition","children":[]},{"level":3,"title":"Semaphore","slug":"semaphore","link":"#semaphore","children":[]},{"level":3,"title":"BoundedSemaphore","slug":"boundedsemaphore","link":"#boundedsemaphore","children":[]}]},{"level":2,"title":"队列集合 ^4","slug":"队列集合-4","link":"#队列集合-4","children":[{"level":3,"title":"Queue","slug":"queue","link":"#queue","children":[]},{"level":3,"title":"优先级队列","slug":"优先级队列","link":"#优先级队列","children":[]},{"level":3,"title":"后进先出队列","slug":"后进先出队列","link":"#后进先出队列","children":[]},{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]}]},{"level":2,"title":"事件循环 ^5","slug":"事件循环-5","link":"#事件循环-5","children":[{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]}]},{"level":2,"title":"高层级 API 索引 [^6]","slug":"高层级-api-索引-6","link":"#高层级-api-索引-6","children":[{"level":3,"title":"任务","slug":"任务-1","link":"#任务-1","children":[]},{"level":3,"title":"队列集","slug":"队列集","link":"#队列集","children":[]},{"level":3,"title":"子进程集","slug":"子进程集","link":"#子进程集","children":[]},{"level":3,"title":"流","slug":"流","link":"#流","children":[]},{"level":3,"title":"同步","slug":"同步","link":"#同步","children":[]},{"level":3,"title":"异常","slug":"异常","link":"#异常","children":[]}]},{"level":2,"title":"关于 never-awaited 协程","slug":"关于-never-awaited-协程","link":"#关于-never-awaited-协程","children":[]}],"git":{},"readingTime":{"minutes":21.86,"words":6557},"filePathRelative":"notes/language/python/python-asyncio.md","localizedDate":"2023年9月10日","excerpt":"<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>这里实际上就是官方文档的搬运，非常不完整，建议直接看<a href=\\"https://docs.python.org/zh-cn/3.10/library/asyncio.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官方文档</a>。</p>\\n</div>\\n<h2>asyncio — 异步 I/O &amp; 协程</h2>\\n<p>协程运行的原理见： <a href=\\"/notes/language/python/python-concurrent.html#%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81\\" target=\\"_blank\\">协程的原理以及代码</a></p>","autoDesc":true}');export{Za as comp,Ga as data};
